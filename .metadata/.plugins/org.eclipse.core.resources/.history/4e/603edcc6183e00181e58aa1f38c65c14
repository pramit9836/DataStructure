/**
 * 
 */
package com.learning.dubly.linkedlist.operations;

/**
 * @author Pramit
 *
 */
public class DoublyLinkedlistOperations {

	/**
	 * @param args
	 */
	
	Node head;
	Node tail;
	
	public boolean insertFirst(double data) {
		
		Node node = new Node(data);
		if(head == null && tail==null) {
			head = tail = node;
			return true;
		}else {
			head.setPrev(node);
			node.setNext(head);
			node.setPrev(null);
			head = node;
			return true;
		}
	}
	
	public boolean insertLast(double data) {
		
		Node node = new Node(data);
		if(head == null && tail==null) {
			head = tail = node;
			return true;
		}else {
			tail.setNext(node);
			node.setPrev(tail);
			node.setNext(null);
			tail = node;
		}
		
		return false;
	}
	
	public void forwardPrinting() {
		Node current = head;
		while(current != null) {
			System.out.println(current.getData());
			current = current.getNext();
		}
	}
	
	public void backwardPrinting() {
		Node current = tail;
		while(current != null) {
			System.out.println(current.getData());
			current = current.getPrev();
		}
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		DoublyLinkedlistOperations doublyLinkedlistOperations = new DoublyLinkedlistOperations();
		doublyLinkedlistOperations.insertFirst(10);
		doublyLinkedlistOperations.insertFirst(77);
		
		doublyLinkedlistOperations.forwardPrinting();
		System.out.println();
		doublyLinkedlistOperations.backwardPrinting();
		
		doublyLinkedlistOperations.insertLast(56);
		doublyLinkedlistOperations.insertLast(34)

	}

}
